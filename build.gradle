buildscript {
    ext {
        javaVersion = JavaVersion.VERSION_11
        kotlinVersion = "1.8.21"
        springBootVersion = "2.7.18"
        detektVersion = "1.23.0"
        spotlessVersion = "6.11.0"
        springCloudVersion = "2021.0.8"
        springBootAdminVersion = "2.5.5"
        springdocVersion = "1.6.11"
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:$spotlessVersion"
    }
}

plugins {
    id "org.springframework.boot" version "${springBootVersion}"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.jetbrains.kotlin.plugin.jpa" version "${kotlinVersion}"
    id "java"
    id "jacoco"
    id "org.sonarqube" version "4.0.0.2929"
    id "com.github.jakemarsden.git-hooks" version "0.0.2"
}

gitHooks {
    hooks = ['pre-push': 'spotlessCheck detekt test']
    gradleCommand = './gradlew'
}

apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "kotlin-jpa"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply from: "gradle/jacoco.gradle"
apply from: "gradle/sonar.gradle"
apply from: "gradle/detekt.gradle"
apply from: "gradle/spotless.gradle"

repositories {
    mavenCentral()
    maven {
        url "https://repo.gradle.org/gradle/libs-releases"
    }
}

group = "com.example"
version = "1.0.0"
sourceCompatibility = javaVersion

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-validation:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-undertow:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-amqp:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    implementation "de.codecentric:spring-boot-admin-starter-client:$springBootAdminVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.13.0"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.springdoc:springdoc-openapi-ui:$springdocVersion"
    implementation "io.github.microutils:kotlin-logging:2.1.21"
    testImplementation("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
        exclude group: "org.mockito", module: "mockito-core"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "io.mockk:mockk:1.12.0"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "sistemas-distribuidos:${project.name}"
    }
}

jacoco {
    toolVersion = "0.8.7"
}

configurations {
    implementation.exclude module: 'spring-boot-starter-tomcat'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = javaVersion
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = javaVersion
    }
}

tasks.register('printVersion') {
    doLast {
        println "Build version: $version"
    }
}

tasks.register('printProjName') {
    doLast {
        println "name: ${project.name}"
    }
}

jar {
    enabled = false
}
